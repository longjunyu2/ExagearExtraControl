/*
 * Copyright 2022 Junyu Long
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 1990,91 by Thomas Roell, Dinkelscherben, Germany.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Thomas Roell not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Thomas Roell makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * THOMAS ROELL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THOMAS ROELL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 */

// @formatter:off -- Disable Formatter Control for the following code
package net.junyulong.ecc.core.input;

@SuppressWarnings("unused")
public enum XServerKeyNames {

  /*
  * EEC WARNING:
  * PLEASE DO NOT MODIFY THE VARIABLE NAMES OF THE FOLLOWING ENUMERATIONS,
  * WHICH ARE DIRECTLY RELATED TO ADDITIONAL RESOURCES.
  */

// #ifndef _WINKEYNAMES_H
// #define _WINKEYNAMES_H

// #define AltMask		Mod1Mask
// #define NumLockMask	Mod2Mask
// #define AltLangMask	Mod3Mask
// #define KanaMask	Mod4Mask
// #define ScrollLockMask	Mod5Mask

// #define ModifierDown(k) ((keyc->state & (k)) == (k))

  /*
  * NOTE: The AT/MF keyboards can generate (via the 8042) two (MF: three)
  *       sets of scancodes. Set3 can only be generated by a MF keyboard.
  *       Set2 sends a makecode for keypress, and the same code prefixed by a
  *       F0 for keyrelease. This is a little bit ugly to handle. Thus we use
  *       here for X386 the PC/XT compatible Set1. This set uses 8bit scancodes.
  *       Bit 7 ist set if the key is released. The code E0 switches to a
  *       different meaning to add the new MF cursorkeys, while not breaking old
  *       applications. E1 is another special prefix. Since I assume that there
  *       will be further versions of PC/XT scancode compatible keyboards, we
  *       may be in trouble one day.
  *
  * IDEA: 1) Use Set2 on AT84 keyboards and translate it to MF Set3.
  *       2) Use the keyboards native set and translate it to common keysyms.
  */

  /*
  * definition of the AT84/MF101/MF102 Keyboard:
  * ============================================================
  *       Defined             Key Cap Glyphs       Pressed value
  *      Key Name            Main       Also       (hex)    (dec)
  *      ----------------   ---------- -------    ------    ------
  */

         KEY_Escape       /* Escape                0x01  */    (9),
         KEY_1            /* 1           !         0x02  */    (10),
         KEY_2            /* 2           @         0x03  */    (11),
         KEY_3            /* 3           #         0x04  */    (12),
         KEY_4            /* 4           $         0x05  */    (13),
         KEY_5            /* 5           %         0x06  */    (14),
         KEY_6            /* 6           ^         0x07  */    (15),
         KEY_7            /* 7           &         0x08  */    (16),
         KEY_8            /* 8           *         0x09  */    (17),
         KEY_9            /* 9           (         0x0a  */   (18),
         KEY_0            /* 0           )         0x0b  */   (19),
         KEY_Minus        /* - (Minus)   _ (Under) 0x0c  */   (20),
         KEY_Equal        /* = (Equal)   +         0x0d  */   (21),
         KEY_BackSpace    /* Back Space            0x0e  */   (22),
         KEY_Tab          /* Tab                   0x0f  */   (23),
         KEY_Q            /* Q                     0x10  */   (24),
         KEY_W            /* W                     0x11  */   (25),
         KEY_E            /* E                     0x12  */   (26),
         KEY_R            /* R                     0x13  */   (27),
         KEY_T            /* T                     0x14  */   (28),
         KEY_Y            /* Y                     0x15  */   (29),
         KEY_U            /* U                     0x16  */   (30),
         KEY_I            /* I                     0x17  */   (31),
         KEY_O            /* O                     0x18  */   (32),
         KEY_P            /* P                     0x19  */   (33),
         KEY_LBrace       /* [           {         0x1a  */   (34),
         KEY_RBrace       /* ]           }         0x1b  */   (35),
         KEY_Enter        /* Enter                 0x1c  */   (36),
         KEY_LCtrl        /* Ctrl(left)            0x1d  */   (37),
         KEY_A            /* A                     0x1e  */   (38),
         KEY_S            /* S                     0x1f  */   (39),
         KEY_D            /* D                     0x20  */   (40),
         KEY_F            /* F                     0x21  */   (41),
         KEY_G            /* G                     0x22  */   (42),
         KEY_H            /* H                     0x23  */   (43),
         KEY_J            /* J                     0x24  */   (44),
         KEY_K            /* K                     0x25  */   (45),
         KEY_L            /* L                     0x26  */   (46),
         KEY_SemiColon    /* ;(SemiColon) :(Colon) 0x27  */   (47),
         KEY_Quote        /* ' (Apostr)  " (Quote) 0x28  */   (48),
         KEY_Tilde        /* ` (Accent)  ~ (Tilde) 0x29  */   (49),
         KEY_ShiftL       /* Shift(left)           0x2a  */   (50),
         KEY_BSlash       /* \(BckSlash) |(VertBar)0x2b  */   (51),
         KEY_Z            /* Z                     0x2c  */   (52),
         KEY_X            /* X                     0x2d  */   (53),
         KEY_C            /* C                     0x2e  */   (54),
         KEY_V            /* V                     0x2f  */   (55),
         KEY_B            /* B                     0x30  */   (56),
         KEY_N            /* N                     0x31  */   (57),
         KEY_M            /* M                     0x32  */   (58),
         KEY_Comma        /* , (Comma)   < (Less)  0x33  */   (59),
         KEY_Period       /* . (Period)  >(Greater)0x34  */   (60),
         KEY_Slash        /* / (Slash)   ?         0x35  */   (61),
         KEY_ShiftR       /* Shift(right)          0x36  */   (62),
         KEY_KP_Multiply  /* *                     0x37  */   (63),
         KEY_Alt          /* Alt(left)             0x38  */   (64),
         KEY_Space        /*   (SpaceBar)          0x39  */   (65),
         KEY_CapsLock     /* CapsLock              0x3a  */   (66),
         KEY_F1           /* F1                    0x3b  */   (67),
         KEY_F2           /* F2                    0x3c  */   (68),
         KEY_F3           /* F3                    0x3d  */   (69),
         KEY_F4           /* F4                    0x3e  */   (70),
         KEY_F5           /* F5                    0x3f  */   (71),
         KEY_F6           /* F6                    0x40  */   (72),
         KEY_F7           /* F7                    0x41  */   (73),
         KEY_F8           /* F8                    0x42  */   (74),
         KEY_F9           /* F9                    0x43  */   (75),
         KEY_F10          /* F10                   0x44  */   (76),
         KEY_NumLock      /* NumLock               0x45  */   (77),
         KEY_ScrollLock   /* ScrollLock            0x46  */   (78),
         KEY_KP_7         /* 7           Home      0x47  */   (79),
         KEY_KP_8         /* 8           Up        0x48  */   (80),
         KEY_KP_9         /* 9           PgUp      0x49  */   (81),
         KEY_KP_Minus     /* - (Minus)             0x4a  */   (82),
         KEY_KP_4         /* 4           Left      0x4b  */   (83),
         KEY_KP_5         /* 5                     0x4c  */   (84),
         KEY_KP_6         /* 6           Right     0x4d  */   (85),
         KEY_KP_Plus      /* + (Plus)              0x4e  */   (86),
         KEY_KP_1         /* 1           End       0x4f  */   (87),
         KEY_KP_2         /* 2           Down      0x50  */   (88),
         KEY_KP_3         /* 3           PgDown    0x51  */   (89),
         KEY_KP_0         /* 0           Insert    0x52  */   (90),
         KEY_KP_Decimal   /* . (Decimal) Delete    0x53  */   (91),
         KEY_SysReqest    /* SysReqest             0x54  */   (92),
         KEY_Fn           /* Fn                    0x55  */   (93),
         KEY_Less         /* < (Less)   >(Greater) 0x56  */   (94),
         KEY_F11          /* F11                   0x57  */   (95),
         KEY_F12          /* F12                   0x58  */   (96),

         KEY_Prefix0      /* special               0x60  */   (96),
         KEY_Prefix1      /* specail               0x61  */   (97),

  /*
  * The 'scancodes' below are generated by the server, because the MF101/102
  * keyboard sends them as sequence of other scancodes
  */
    // TODO: 从Exagear中推定下列键值
         KEY_Home         /* Home                  0x59  */   (89),
         KEY_Up           /* Up                    0x5a  */   (90),
         KEY_PgUp         /* PgUp                  0x5b  */   (91),
         KEY_Left         /* Left                  0x5c  */   (92),
         KEY_Begin        /* Begin                 0x5d  */   (93),
         KEY_Right        /* Right                 0x5e  */   (94),
         KEY_End          /* End                   0x5f  */   (95),
         KEY_Down         /* Down                  0x60  */   (96),
         KEY_PgDown       /* PgDown                0x61  */   (97),
         KEY_Insert       /* Insert                0x62  */   (98),
         KEY_Delete       /* Delete                0x63  */   (99),
         KEY_KP_Enter     /* Enter                 0x64  */  (100),
         KEY_RCtrl        /* Ctrl(right)           0x65  */  (101),
         KEY_Pause        /* Pause                 0x66  */  (102),
         KEY_Print        /* Print                 0x67  */  (103),
         KEY_KP_Divide    /* Divide                0x68  */  (104),
         KEY_AltLang      /* AtlLang(right)        0x69  */  (105),
         KEY_Break        /* Break                 0x6a  */  (106),
         KEY_LMeta        /* Left Meta             0x6b  */  (107),
         KEY_RMeta        /* Right Meta            0x6c  */  (108),
         KEY_Menu         /* Menu                  0x6d  */  (109),
         KEY_F13          /* F13                   0x6e  */  (110),
         KEY_F14          /* F14                   0x6f  */  (111),
         KEY_F15          /* F15                   0x70  */  (112),
         KEY_F16          /* F16                   0x71  */  (113),
         KEY_F17          /* F17                   0x72  */  (114),
         KEY_KP_DEC       /* KP_DEC                0x73  */  (115),
         KEY_KP_Equal	  /* Equal (Keypad)        0x76  */  (118),
         KEY_XFER         /* Kanji Transfer        0x79  */  (121),
         KEY_NFER         /* No Kanji Transfer     0x7b  */  (123),
         KEY_Yen          /* Yen                   0x7d  */  (125),
         KEY_HKTG         /* Hirugana/Katakana tog 0xc8  */  (200),
         KEY_BSlash2      /* \           _         0xcb  */  (203),

         KEY_Mute         /* Audio Mute                  */  (152),
         KEY_AudioLower   /* Audio Lower                 */  (168),
         KEY_AudioRaise   /* Audio Raise                 */  (166),

         KEY_NEXTSONG     /* Media next                  */  (145),
         KEY_PLAYPAUSE    /* Media play/pause toggle     */  (154),
         KEY_PREVIOUSSONG /* Media previous              */  (136),
         KEY_STOPCD       /* Media stop                  */  (156),

  /* These are for "notused" and "unknown" entries in translation maps. */
         KEY_NOTUSED	  (0),
         KEY_UNKNOWN	(255);

// #endif                          /* _WINKEYNAMES_H */

    public final static int GLYPHS_PER_KEY  = 4;
    public final static int NUM_KEYCODES    = 248;
    public final static int MIN_KEYCODE     = 8;
    public final static int MAX_KEYCODE     = (NUM_KEYCODES + MIN_KEYCODE - 1);

    private final int value;

    XServerKeyNames(int value) {
        this.value = value;
    }

    public int value() {
        return this.value;
    }
}
